{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.limit = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n  get count() {\n    return this.array.length;\n  }\n  init() {\n    const container = this.container;\n    const options = container.actualOptions;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    let handled = false;\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    if (!handled) {\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n    if (options.infection.enable) {\n      for (let i = 0; i < options.infection.infections; i++) {\n        const notInfected = this.array.filter(p => p.infecter.infectionStage === undefined);\n        const infected = Utils_1.Utils.itemFromArray(notInfected);\n        infected.infecter.startInfection(0);\n      }\n    }\n    this.interactionManager.init();\n    container.pathGenerator.init();\n  }\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  removeAt(index, quantity, override) {\n    if (index >= 0 && index <= this.count) {\n      for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n        particle.destroy(override);\n      }\n    }\n  }\n  remove(particle, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, override);\n  }\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n    for (const particle of this.array) {\n      const resizeFactor = this.container.canvas.resizeFactor;\n      if (resizeFactor) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n      particle.move(delta);\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n    this.interactionManager.externalInteract(delta);\n    for (const particle of this.container.particles.array) {\n      particle.update(delta);\n      if (!particle.destroyed && !particle.spawning) {\n        this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete container.canvas.resizeFactor;\n  }\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this.array) {\n      p.draw(delta);\n    }\n  }\n  clear() {\n    this.array = [];\n  }\n  push(nb, mouse, overrideOptions) {\n    this.pushing = true;\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n    }\n    this.pushing = false;\n  }\n  addParticle(position, overrideOptions) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const limit = options.particles.number.limit * container.density;\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n    return this.pushParticle(position, overrideOptions);\n  }\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = new ParticlesOptions_1.ParticlesOptions();\n    options.load(parent.options);\n    const factor = Utils_1.NumberUtils.getRangeValue(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? Utils_1.NumberUtils.setRangeValue(-parent.size.value, parent.size.value) : 0;\n    const position = {\n      x: parent.position.x + Utils_1.NumberUtils.randomInRange(offset),\n      y: parent.position.y + Utils_1.NumberUtils.randomInRange(offset)\n    };\n    return this.pushParticle(position, options, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n      particle.velocity.length = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n  removeQuantity(quantity) {\n    this.removeAt(0, quantity);\n  }\n  getLinkFrequency(p1, p2) {\n    const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n    let res = this.linksFreq.get(key);\n    if (res === undefined) {\n      res = Math.random();\n      this.linksFreq.set(key, res);\n    }\n    return res;\n  }\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.trianglesFreq.get(key);\n    if (res === undefined) {\n      res = Math.random();\n      this.trianglesFreq.set(key, res);\n    }\n    return res;\n  }\n  setDensity() {\n    this.applyDensity(this.container.actualOptions.particles);\n  }\n  applyDensity(options) {\n    var _a;\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n    const particlesCount = this.count;\n    this.limit = numberOptions.limit * densityFactor;\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber);\n    }\n  }\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n  }\n  pushParticle(position, overrideOptions, initializer) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n      let canAdd = true;\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n      if (!canAdd) {\n        return;\n      }\n      this.array.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n}\nexports.Particles = Particles;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","constructor","container","nextId","array","limit","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","count","length","init","options","actualOptions","handled","particle","manualParticles","pos","position","x","y","undefined","addParticle","plugin","plugins","particlesInitialization","i","particles","number","infection","enable","infections","notInfected","filter","p","infecter","infectionStage","infected","Utils","itemFromArray","startInfection","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","splice","destroy","remove","indexOf","update","delta","particlesToDelete","resizeFactor","move","destroyed","push","insert","Point","getPosition","externalInteract","spawning","particlesInteract","drawPlugin","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","ParticlesOptions","load","NumberUtils","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","key","Math","id","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","setDensity","applyDensity","_a","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","abs","densityOptions","element","pxRatio","retina","pixelRatio","pow","area","initializer","Particle","canAdd","e","console","warn"],"sources":["H:/React Website/node_modules/tsparticles/Core/Particles.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.limit = 0;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.actualOptions;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        let handled = false;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.filter((p) => p.infecter.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.infecter.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.pathGenerator.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity, override) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy(override);\n            }\n        }\n    }\n    remove(particle, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = this.container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mouse, overrideOptions) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = Utils_1.NumberUtils.getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? Utils_1.NumberUtils.setRangeValue(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + Utils_1.NumberUtils.randomInRange(offset),\n            y: parent.position.y + Utils_1.NumberUtils.randomInRange(offset),\n        };\n        return this.pushParticle(position, options, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity) {\n        this.removeAt(0, quantity);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.linksFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.linksFreq.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.trianglesFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.trianglesFreq.set(key, res);\n        }\n        return res;\n    }\n    setDensity() {\n        this.applyDensity(this.container.actualOptions.particles);\n    }\n    applyDensity(options) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n        const particlesCount = this.count;\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,oBAAoB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AACrE,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,+CAA+C,CAAC;AACnF,MAAMF,SAAS,CAAC;EACZM,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAI,CAACC,aAAa,GAAG,IAAID,GAAG,EAAE;IAC9B,IAAI,CAACE,kBAAkB,GAAG,IAAIV,oBAAoB,CAACW,kBAAkB,CAACR,SAAS,CAAC;IAChF,MAAMS,UAAU,GAAG,IAAI,CAACT,SAAS,CAACU,MAAM,CAACC,IAAI;IAC7C,IAAI,CAACC,WAAW,GAAG,IAAIP,GAAG,EAAE;IAC5B,IAAI,CAACQ,QAAQ,GAAG,IAAIjB,OAAO,CAACkB,QAAQ,CAAC,IAAIlB,OAAO,CAACmB,SAAS,CAAC,CAACN,UAAU,CAACO,KAAK,GAAG,CAAC,EAAE,CAACP,UAAU,CAACQ,MAAM,GAAG,CAAC,EAAGR,UAAU,CAACO,KAAK,GAAG,CAAC,GAAI,CAAC,EAAGP,UAAU,CAACQ,MAAM,GAAG,CAAC,GAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1K;EACA,IAAIC,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAAChB,KAAK,CAACiB,MAAM;EAC5B;EACAC,IAAIA,CAAA,EAAG;IACH,MAAMpB,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,MAAMqB,OAAO,GAAGrB,SAAS,CAACsB,aAAa;IACvC,IAAI,CAAClB,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAI,CAACC,aAAa,GAAG,IAAID,GAAG,EAAE;IAC9B,IAAIkB,OAAO,GAAG,KAAK;IACnB,KAAK,MAAMC,QAAQ,IAAIH,OAAO,CAACI,eAAe,EAAE;MAC5C,MAAMC,GAAG,GAAGF,QAAQ,CAACG,QAAQ,GACvB;QACEC,CAAC,EAAGJ,QAAQ,CAACG,QAAQ,CAACC,CAAC,GAAG5B,SAAS,CAACU,MAAM,CAACC,IAAI,CAACK,KAAK,GAAI,GAAG;QAC5Da,CAAC,EAAGL,QAAQ,CAACG,QAAQ,CAACE,CAAC,GAAG7B,SAAS,CAACU,MAAM,CAACC,IAAI,CAACM,MAAM,GAAI;MAC9D,CAAC,GACCa,SAAS;MACf,IAAI,CAACC,WAAW,CAACL,GAAG,EAAEF,QAAQ,CAACH,OAAO,CAAC;IAC3C;IACA,KAAK,MAAM,GAAGW,MAAM,CAAC,IAAIhC,SAAS,CAACiC,OAAO,EAAE;MACxC,IAAID,MAAM,CAACE,uBAAuB,KAAKJ,SAAS,EAAE;QAC9CP,OAAO,GAAGS,MAAM,CAACE,uBAAuB,EAAE;MAC9C;MACA,IAAIX,OAAO,EAAE;QACT;MACJ;IACJ;IACA,IAAI,CAACA,OAAO,EAAE;MACV,KAAK,IAAIY,CAAC,GAAG,IAAI,CAACjB,KAAK,EAAEiB,CAAC,GAAGd,OAAO,CAACe,SAAS,CAACC,MAAM,CAAC7C,KAAK,EAAE2C,CAAC,EAAE,EAAE;QAC9D,IAAI,CAACJ,WAAW,EAAE;MACtB;IACJ;IACA,IAAIV,OAAO,CAACiB,SAAS,CAACC,MAAM,EAAE;MAC1B,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,OAAO,CAACiB,SAAS,CAACE,UAAU,EAAEL,CAAC,EAAE,EAAE;QACnD,MAAMM,WAAW,GAAG,IAAI,CAACvC,KAAK,CAACwC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,CAACC,cAAc,KAAKf,SAAS,CAAC;QACrF,MAAMgB,QAAQ,GAAGlD,OAAO,CAACmD,KAAK,CAACC,aAAa,CAACP,WAAW,CAAC;QACzDK,QAAQ,CAACF,QAAQ,CAACK,cAAc,CAAC,CAAC,CAAC;MACvC;IACJ;IACA,IAAI,CAAC1C,kBAAkB,CAACa,IAAI,EAAE;IAC9BpB,SAAS,CAACkD,aAAa,CAAC9B,IAAI,EAAE;EAClC;EACA+B,MAAMA,CAAA,EAAG;IACL,IAAI,CAACC,KAAK,EAAE;IACZ,IAAI,CAAChC,IAAI,EAAE;IACX,IAAI,CAACiC,IAAI,CAAC;MAAE7D,KAAK,EAAE,CAAC;MAAE8D,MAAM,EAAE;IAAE,CAAC,CAAC;EACtC;EACAC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IAChC,IAAIF,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACtC,KAAK,EAAE;MACnC,KAAK,MAAMM,QAAQ,IAAI,IAAI,CAACtB,KAAK,CAACyD,MAAM,CAACH,KAAK,EAAEC,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAGA,QAAQ,GAAG,CAAC,CAAC,EAAE;QACtGjC,QAAQ,CAACoC,OAAO,CAACF,QAAQ,CAAC;MAC9B;IACJ;EACJ;EACAG,MAAMA,CAACrC,QAAQ,EAAEkC,QAAQ,EAAE;IACvB,IAAI,CAACH,QAAQ,CAAC,IAAI,CAACrD,KAAK,CAAC4D,OAAO,CAACtC,QAAQ,CAAC,EAAEM,SAAS,EAAE4B,QAAQ,CAAC;EACpE;EACAK,MAAMA,CAACC,KAAK,EAAE;IACV,MAAMhE,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,MAAMiE,iBAAiB,GAAG,EAAE;IAC5BjE,SAAS,CAACkD,aAAa,CAACa,MAAM,EAAE;IAChC,KAAK,MAAM,GAAG/B,MAAM,CAAC,IAAIhC,SAAS,CAACiC,OAAO,EAAE;MACxC,IAAID,MAAM,CAAC+B,MAAM,KAAKjC,SAAS,EAAE;QAC7BE,MAAM,CAAC+B,MAAM,CAACC,KAAK,CAAC;MACxB;IACJ;IACA,KAAK,MAAMxC,QAAQ,IAAI,IAAI,CAACtB,KAAK,EAAE;MAC/B,MAAMgE,YAAY,GAAG,IAAI,CAAClE,SAAS,CAACU,MAAM,CAACwD,YAAY;MACvD,IAAIA,YAAY,EAAE;QACd1C,QAAQ,CAACG,QAAQ,CAACC,CAAC,IAAIsC,YAAY,CAAClD,KAAK;QACzCQ,QAAQ,CAACG,QAAQ,CAACE,CAAC,IAAIqC,YAAY,CAACjD,MAAM;MAC9C;MACAO,QAAQ,CAAC2C,IAAI,CAACH,KAAK,CAAC;MACpB,IAAIxC,QAAQ,CAAC4C,SAAS,EAAE;QACpBH,iBAAiB,CAACI,IAAI,CAAC7C,QAAQ,CAAC;QAChC;MACJ;MACA,IAAI,CAACX,QAAQ,CAACyD,MAAM,CAAC,IAAI1E,OAAO,CAAC2E,KAAK,CAAC/C,QAAQ,CAACgD,WAAW,EAAE,EAAEhD,QAAQ,CAAC,CAAC;IAC7E;IACA,KAAK,MAAMA,QAAQ,IAAIyC,iBAAiB,EAAE;MACtC,IAAI,CAACJ,MAAM,CAACrC,QAAQ,CAAC;IACzB;IACA,IAAI,CAACjB,kBAAkB,CAACkE,gBAAgB,CAACT,KAAK,CAAC;IAC/C,KAAK,MAAMxC,QAAQ,IAAI,IAAI,CAACxB,SAAS,CAACoC,SAAS,CAAClC,KAAK,EAAE;MACnDsB,QAAQ,CAACuC,MAAM,CAACC,KAAK,CAAC;MACtB,IAAI,CAACxC,QAAQ,CAAC4C,SAAS,IAAI,CAAC5C,QAAQ,CAACkD,QAAQ,EAAE;QAC3C,IAAI,CAACnE,kBAAkB,CAACoE,iBAAiB,CAACnD,QAAQ,EAAEwC,KAAK,CAAC;MAC9D;IACJ;IACA,OAAOhE,SAAS,CAACU,MAAM,CAACwD,YAAY;EACxC;EACAb,IAAIA,CAACW,KAAK,EAAE;IACR,MAAMhE,SAAS,GAAG,IAAI,CAACA,SAAS;IAChCA,SAAS,CAACU,MAAM,CAAC0C,KAAK,EAAE;IACxB,MAAM3C,UAAU,GAAG,IAAI,CAACT,SAAS,CAACU,MAAM,CAACC,IAAI;IAC7C,IAAI,CAACE,QAAQ,GAAG,IAAIjB,OAAO,CAACkB,QAAQ,CAAC,IAAIlB,OAAO,CAACmB,SAAS,CAAC,CAACN,UAAU,CAACO,KAAK,GAAG,CAAC,EAAE,CAACP,UAAU,CAACQ,MAAM,GAAG,CAAC,EAAGR,UAAU,CAACO,KAAK,GAAG,CAAC,GAAI,CAAC,EAAGP,UAAU,CAACQ,MAAM,GAAG,CAAC,GAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IACtK,IAAI,CAAC8C,MAAM,CAACC,KAAK,CAAC;IAClB,KAAK,MAAM,GAAGhC,MAAM,CAAC,IAAIhC,SAAS,CAACiC,OAAO,EAAE;MACxCjC,SAAS,CAACU,MAAM,CAACkE,UAAU,CAAC5C,MAAM,EAAEgC,KAAK,CAAC;IAC9C;IACA,KAAK,MAAMrB,CAAC,IAAI,IAAI,CAACzC,KAAK,EAAE;MACxByC,CAAC,CAACU,IAAI,CAACW,KAAK,CAAC;IACjB;EACJ;EACAZ,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAClD,KAAK,GAAG,EAAE;EACnB;EACAmE,IAAIA,CAACQ,EAAE,EAAEC,KAAK,EAAEC,eAAe,EAAE;IAC7B,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0C,EAAE,EAAE1C,CAAC,EAAE,EAAE;MACzB,IAAI,CAACJ,WAAW,CAAC+C,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACnD,QAAQ,EAAEoD,eAAe,CAAC;IACnG;IACA,IAAI,CAACC,OAAO,GAAG,KAAK;EACxB;EACAjD,WAAWA,CAACJ,QAAQ,EAAEoD,eAAe,EAAE;IACnC,MAAM/E,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,MAAMqB,OAAO,GAAGrB,SAAS,CAACsB,aAAa;IACvC,MAAMnB,KAAK,GAAGkB,OAAO,CAACe,SAAS,CAACC,MAAM,CAAClC,KAAK,GAAGH,SAAS,CAACiF,OAAO;IAChE,IAAI9E,KAAK,GAAG,CAAC,EAAE;MACX,MAAM+E,aAAa,GAAG,IAAI,CAAChE,KAAK,GAAG,CAAC,GAAGf,KAAK;MAC5C,IAAI+E,aAAa,GAAG,CAAC,EAAE;QACnB,IAAI,CAACC,cAAc,CAACD,aAAa,CAAC;MACtC;IACJ;IACA,OAAO,IAAI,CAACE,YAAY,CAACzD,QAAQ,EAAEoD,eAAe,CAAC;EACvD;EACAM,gBAAgBA,CAACC,MAAM,EAAE;IACrB,MAAMC,YAAY,GAAGD,MAAM,CAACjE,OAAO,CAACuC,OAAO,CAAC4B,KAAK;IACjD,MAAMnE,OAAO,GAAG,IAAIvB,kBAAkB,CAAC2F,gBAAgB,EAAE;IACzDpE,OAAO,CAACqE,IAAI,CAACJ,MAAM,CAACjE,OAAO,CAAC;IAC5B,MAAMiC,MAAM,GAAG1D,OAAO,CAAC+F,WAAW,CAACC,aAAa,CAACL,YAAY,CAACjC,MAAM,CAAC9D,KAAK,CAAC;IAC3E6B,OAAO,CAACwE,KAAK,CAACH,IAAI,CAAC;MACflG,KAAK,EAAE;QACHsG,GAAG,EAAER,MAAM,CAACS,YAAY;MAC5B;IACJ,CAAC,CAAC;IACF,IAAI,OAAO1E,OAAO,CAACV,IAAI,CAACnB,KAAK,KAAK,QAAQ,EAAE;MACxC6B,OAAO,CAACV,IAAI,CAACnB,KAAK,IAAI8D,MAAM;IAChC,CAAC,MACI;MACDjC,OAAO,CAACV,IAAI,CAACnB,KAAK,CAACwG,GAAG,IAAI1C,MAAM;MAChCjC,OAAO,CAACV,IAAI,CAACnB,KAAK,CAACyG,GAAG,IAAI3C,MAAM;IACpC;IACAjC,OAAO,CAACqE,IAAI,CAACH,YAAY,CAACnD,SAAS,CAAC;IACpC,MAAM8D,MAAM,GAAGX,YAAY,CAACY,UAAU,GAAGvG,OAAO,CAAC+F,WAAW,CAACS,aAAa,CAAC,CAACd,MAAM,CAAC3E,IAAI,CAACnB,KAAK,EAAE8F,MAAM,CAAC3E,IAAI,CAACnB,KAAK,CAAC,GAAG,CAAC;IACrH,MAAMmC,QAAQ,GAAG;MACbC,CAAC,EAAE0D,MAAM,CAAC3D,QAAQ,CAACC,CAAC,GAAGhC,OAAO,CAAC+F,WAAW,CAACU,aAAa,CAACH,MAAM,CAAC;MAChErE,CAAC,EAAEyD,MAAM,CAAC3D,QAAQ,CAACE,CAAC,GAAGjC,OAAO,CAAC+F,WAAW,CAACU,aAAa,CAACH,MAAM;IACnE,CAAC;IACD,OAAO,IAAI,CAACd,YAAY,CAACzD,QAAQ,EAAEN,OAAO,EAAGG,QAAQ,IAAK;MACtD,IAAIA,QAAQ,CAACb,IAAI,CAACnB,KAAK,GAAG,GAAG,EAAE;QAC3B,OAAO,KAAK;MAChB;MACAgC,QAAQ,CAAC8E,QAAQ,CAACnF,MAAM,GAAGvB,OAAO,CAAC+F,WAAW,CAACU,aAAa,CAACzG,OAAO,CAAC+F,WAAW,CAACS,aAAa,CAACd,MAAM,CAACgB,QAAQ,CAACnF,MAAM,EAAEK,QAAQ,CAAC8E,QAAQ,CAACnF,MAAM,CAAC,CAAC;MACjJK,QAAQ,CAAC+E,UAAU,GAAGjB,MAAM,CAACiB,UAAU,GAAG,CAAC;MAC3C/E,QAAQ,CAACgF,WAAW,GAAG,IAAI;MAC3BC,UAAU,CAAC,MAAM;QACbjF,QAAQ,CAACgF,WAAW,GAAG,KAAK;MAChC,CAAC,EAAE,GAAG,CAAC;MACP,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EACArB,cAAcA,CAAC1B,QAAQ,EAAE;IACrB,IAAI,CAACF,QAAQ,CAAC,CAAC,EAAEE,QAAQ,CAAC;EAC9B;EACAiD,gBAAgBA,CAACC,EAAE,EAAEC,EAAE,EAAE;IACrB,MAAMC,GAAG,GAAI,GAAEC,IAAI,CAACd,GAAG,CAACW,EAAE,CAACI,EAAE,EAAEH,EAAE,CAACG,EAAE,CAAE,IAAGD,IAAI,CAACb,GAAG,CAACU,EAAE,CAACI,EAAE,EAAEH,EAAE,CAACG,EAAE,CAAE,EAAC;IACjE,IAAIC,GAAG,GAAG,IAAI,CAAC5G,SAAS,CAAC6G,GAAG,CAACJ,GAAG,CAAC;IACjC,IAAIG,GAAG,KAAKlF,SAAS,EAAE;MACnBkF,GAAG,GAAGF,IAAI,CAACI,MAAM,EAAE;MACnB,IAAI,CAAC9G,SAAS,CAAC+G,GAAG,CAACN,GAAG,EAAEG,GAAG,CAAC;IAChC;IACA,OAAOA,GAAG;EACd;EACAI,oBAAoBA,CAACT,EAAE,EAAEC,EAAE,EAAES,EAAE,EAAE;IAC7B,IAAI,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAG,CAACb,EAAE,CAACI,EAAE,EAAEH,EAAE,CAACG,EAAE,EAAEM,EAAE,CAACN,EAAE,CAAC;IAC3C,IAAIO,GAAG,GAAGC,GAAG,EAAE;MACX,CAACA,GAAG,EAAED,GAAG,CAAC,GAAG,CAACA,GAAG,EAAEC,GAAG,CAAC;IAC3B;IACA,IAAIA,GAAG,GAAGC,GAAG,EAAE;MACX,CAACA,GAAG,EAAED,GAAG,CAAC,GAAG,CAACA,GAAG,EAAEC,GAAG,CAAC;IAC3B;IACA,IAAIF,GAAG,GAAGE,GAAG,EAAE;MACX,CAACA,GAAG,EAAEF,GAAG,CAAC,GAAG,CAACA,GAAG,EAAEE,GAAG,CAAC;IAC3B;IACA,MAAMX,GAAG,GAAI,GAAES,GAAI,IAAGC,GAAI,IAAGC,GAAI,EAAC;IAClC,IAAIR,GAAG,GAAG,IAAI,CAAC1G,aAAa,CAAC2G,GAAG,CAACJ,GAAG,CAAC;IACrC,IAAIG,GAAG,KAAKlF,SAAS,EAAE;MACnBkF,GAAG,GAAGF,IAAI,CAACI,MAAM,EAAE;MACnB,IAAI,CAAC5G,aAAa,CAAC6G,GAAG,CAACN,GAAG,EAAEG,GAAG,CAAC;IACpC;IACA,OAAOA,GAAG;EACd;EACAS,UAAUA,CAAA,EAAG;IACT,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC1H,SAAS,CAACsB,aAAa,CAACc,SAAS,CAAC;EAC7D;EACAsF,YAAYA,CAACrG,OAAO,EAAE;IAClB,IAAIsG,EAAE;IACN,IAAI,EAAE,CAACA,EAAE,GAAGtG,OAAO,CAACgB,MAAM,CAAC4C,OAAO,MAAM,IAAI,IAAI0C,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACpF,MAAM,CAAC,EAAE;MACjF;IACJ;IACA,MAAMqF,aAAa,GAAGvG,OAAO,CAACgB,MAAM;IACpC,MAAMwF,aAAa,GAAG,IAAI,CAACC,iBAAiB,CAACF,aAAa,CAAC3C,OAAO,CAAC;IACnE,MAAM8C,kBAAkB,GAAGH,aAAa,CAACpI,KAAK;IAC9C,MAAMwI,iBAAiB,GAAGJ,aAAa,CAACzH,KAAK,GAAG,CAAC,GAAGyH,aAAa,CAACzH,KAAK,GAAG4H,kBAAkB;IAC5F,MAAME,eAAe,GAAGnB,IAAI,CAACd,GAAG,CAAC+B,kBAAkB,EAAEC,iBAAiB,CAAC,GAAGH,aAAa;IACvF,MAAMK,cAAc,GAAG,IAAI,CAAChH,KAAK;IACjC,IAAI,CAACf,KAAK,GAAGyH,aAAa,CAACzH,KAAK,GAAG0H,aAAa;IAChD,IAAIK,cAAc,GAAGD,eAAe,EAAE;MAClC,IAAI,CAAC5D,IAAI,CAACyC,IAAI,CAACqB,GAAG,CAACF,eAAe,GAAGC,cAAc,CAAC,EAAEpG,SAAS,EAAET,OAAO,CAAC;IAC7E,CAAC,MACI,IAAI6G,cAAc,GAAGD,eAAe,EAAE;MACvC,IAAI,CAAC9C,cAAc,CAAC+C,cAAc,GAAGD,eAAe,CAAC;IACzD;EACJ;EACAH,iBAAiBA,CAACM,cAAc,EAAE;IAC9B,MAAMpI,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAI,CAACA,SAAS,CAACU,MAAM,CAAC2H,OAAO,IAAI,CAACD,cAAc,CAAC7F,MAAM,EAAE;MACrD,OAAO,CAAC;IACZ;IACA,MAAM7B,MAAM,GAAGV,SAAS,CAACU,MAAM,CAAC2H,OAAO;IACvC,MAAMC,OAAO,GAAGtI,SAAS,CAACuI,MAAM,CAACC,UAAU;IAC3C,OAAQ9H,MAAM,CAACM,KAAK,GAAGN,MAAM,CAACO,MAAM,IAAKmH,cAAc,CAAC9E,MAAM,GAAGwD,IAAI,CAAC2B,GAAG,CAACH,OAAO,EAAE,CAAC,CAAC,GAAGF,cAAc,CAACM,IAAI,CAAC;EAChH;EACAtD,YAAYA,CAACzD,QAAQ,EAAEoD,eAAe,EAAE4D,WAAW,EAAE;IACjD,IAAI;MACA,MAAMnH,QAAQ,GAAG,IAAI9B,UAAU,CAACkJ,QAAQ,CAAC,IAAI,CAAC3I,MAAM,EAAE,IAAI,CAACD,SAAS,EAAE2B,QAAQ,EAAEoD,eAAe,CAAC;MAChG,IAAI8D,MAAM,GAAG,IAAI;MACjB,IAAIF,WAAW,EAAE;QACbE,MAAM,GAAGF,WAAW,CAACnH,QAAQ,CAAC;MAClC;MACA,IAAI,CAACqH,MAAM,EAAE;QACT;MACJ;MACA,IAAI,CAAC3I,KAAK,CAACmE,IAAI,CAAC7C,QAAQ,CAAC;MACzB,IAAI,CAACvB,MAAM,EAAE;MACb,OAAOuB,QAAQ;IACnB,CAAC,CACD,OAAOsH,CAAC,EAAE;MACNC,OAAO,CAACC,IAAI,CAAE,0BAAyBF,CAAE,EAAC,CAAC;MAC3C;IACJ;EACJ;AACJ;AACAvJ,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}