{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\nconst plugins = [];\nconst presets = new Map();\nconst drawers = new Map();\nconst pathGenerators = new Map();\nclass Plugins {\n  static getPlugin(plugin) {\n    return plugins.find(t => t.id === plugin);\n  }\n  static addPlugin(plugin) {\n    if (!Plugins.getPlugin(plugin.id)) {\n      plugins.push(plugin);\n    }\n  }\n  static getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n    return res;\n  }\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  static getPreset(preset) {\n    return presets.get(preset);\n  }\n  static addPreset(presetKey, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (override || !Plugins.getPreset(presetKey)) {\n      presets.set(presetKey, options);\n    }\n  }\n  static addShapeDrawer(type, drawer) {\n    if (!Plugins.getShapeDrawer(type)) {\n      drawers.set(type, drawer);\n    }\n  }\n  static getShapeDrawer(type) {\n    return drawers.get(type);\n  }\n  static getSupportedShapes() {\n    return drawers.keys();\n  }\n  static getPathGenerator(type) {\n    return pathGenerators.get(type);\n  }\n  static addPathGenerator(type, pathGenerator) {\n    if (!Plugins.getPathGenerator(type)) {\n      pathGenerators.set(type, pathGenerator);\n    }\n  }\n}\nexports.Plugins = Plugins;","map":{"version":3,"names":["Object","defineProperty","exports","value","Plugins","plugins","presets","Map","drawers","pathGenerators","getPlugin","plugin","find","t","id","addPlugin","push","getAvailablePlugins","container","res","needsPlugin","actualOptions","set","loadOptions","options","sourceOptions","getPreset","preset","get","addPreset","presetKey","override","arguments","length","undefined","addShapeDrawer","type","drawer","getShapeDrawer","getSupportedShapes","keys","getPathGenerator","addPathGenerator","pathGenerator"],"sources":["C:/Users/rakib/Capstone2/rakibulll.github.io/node_modules/tsparticles/Utils/Plugins.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plugins = void 0;\nconst plugins = [];\nconst presets = new Map();\nconst drawers = new Map();\nconst pathGenerators = new Map();\nclass Plugins {\n    static getPlugin(plugin) {\n        return plugins.find((t) => t.id === plugin);\n    }\n    static addPlugin(plugin) {\n        if (!Plugins.getPlugin(plugin.id)) {\n            plugins.push(plugin);\n        }\n    }\n    static getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of plugins) {\n            if (!plugin.needsPlugin(container.actualOptions)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    static loadOptions(options, sourceOptions) {\n        for (const plugin of plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    static getPreset(preset) {\n        return presets.get(preset);\n    }\n    static addPreset(presetKey, options, override = false) {\n        if (override || !Plugins.getPreset(presetKey)) {\n            presets.set(presetKey, options);\n        }\n    }\n    static addShapeDrawer(type, drawer) {\n        if (!Plugins.getShapeDrawer(type)) {\n            drawers.set(type, drawer);\n        }\n    }\n    static getShapeDrawer(type) {\n        return drawers.get(type);\n    }\n    static getSupportedShapes() {\n        return drawers.keys();\n    }\n    static getPathGenerator(type) {\n        return pathGenerators.get(type);\n    }\n    static addPathGenerator(type, pathGenerator) {\n        if (!Plugins.getPathGenerator(type)) {\n            pathGenerators.set(type, pathGenerator);\n        }\n    }\n}\nexports.Plugins = Plugins;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAAE;AACzB,MAAMC,OAAO,GAAG,IAAID,GAAG,EAAE;AACzB,MAAME,cAAc,GAAG,IAAIF,GAAG,EAAE;AAChC,MAAMH,OAAO,CAAC;EACV,OAAOM,SAASA,CAACC,MAAM,EAAE;IACrB,OAAON,OAAO,CAACO,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKH,MAAM,CAAC;EAC/C;EACA,OAAOI,SAASA,CAACJ,MAAM,EAAE;IACrB,IAAI,CAACP,OAAO,CAACM,SAAS,CAACC,MAAM,CAACG,EAAE,CAAC,EAAE;MAC/BT,OAAO,CAACW,IAAI,CAACL,MAAM,CAAC;IACxB;EACJ;EACA,OAAOM,mBAAmBA,CAACC,SAAS,EAAE;IAClC,MAAMC,GAAG,GAAG,IAAIZ,GAAG,EAAE;IACrB,KAAK,MAAMI,MAAM,IAAIN,OAAO,EAAE;MAC1B,IAAI,CAACM,MAAM,CAACS,WAAW,CAACF,SAAS,CAACG,aAAa,CAAC,EAAE;QAC9C;MACJ;MACAF,GAAG,CAACG,GAAG,CAACX,MAAM,CAACG,EAAE,EAAEH,MAAM,CAACD,SAAS,CAACQ,SAAS,CAAC,CAAC;IACnD;IACA,OAAOC,GAAG;EACd;EACA,OAAOI,WAAWA,CAACC,OAAO,EAAEC,aAAa,EAAE;IACvC,KAAK,MAAMd,MAAM,IAAIN,OAAO,EAAE;MAC1BM,MAAM,CAACY,WAAW,CAACC,OAAO,EAAEC,aAAa,CAAC;IAC9C;EACJ;EACA,OAAOC,SAASA,CAACC,MAAM,EAAE;IACrB,OAAOrB,OAAO,CAACsB,GAAG,CAACD,MAAM,CAAC;EAC9B;EACA,OAAOE,SAASA,CAACC,SAAS,EAAEN,OAAO,EAAoB;IAAA,IAAlBO,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACjD,IAAID,QAAQ,IAAI,CAAC3B,OAAO,CAACsB,SAAS,CAACI,SAAS,CAAC,EAAE;MAC3CxB,OAAO,CAACgB,GAAG,CAACQ,SAAS,EAAEN,OAAO,CAAC;IACnC;EACJ;EACA,OAAOW,cAAcA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAChC,IAAI,CAACjC,OAAO,CAACkC,cAAc,CAACF,IAAI,CAAC,EAAE;MAC/B5B,OAAO,CAACc,GAAG,CAACc,IAAI,EAAEC,MAAM,CAAC;IAC7B;EACJ;EACA,OAAOC,cAAcA,CAACF,IAAI,EAAE;IACxB,OAAO5B,OAAO,CAACoB,GAAG,CAACQ,IAAI,CAAC;EAC5B;EACA,OAAOG,kBAAkBA,CAAA,EAAG;IACxB,OAAO/B,OAAO,CAACgC,IAAI,EAAE;EACzB;EACA,OAAOC,gBAAgBA,CAACL,IAAI,EAAE;IAC1B,OAAO3B,cAAc,CAACmB,GAAG,CAACQ,IAAI,CAAC;EACnC;EACA,OAAOM,gBAAgBA,CAACN,IAAI,EAAEO,aAAa,EAAE;IACzC,IAAI,CAACvC,OAAO,CAACqC,gBAAgB,CAACL,IAAI,CAAC,EAAE;MACjC3B,cAAc,CAACa,GAAG,CAACc,IAAI,EAAEO,aAAa,CAAC;IAC3C;EACJ;AACJ;AACAzC,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}