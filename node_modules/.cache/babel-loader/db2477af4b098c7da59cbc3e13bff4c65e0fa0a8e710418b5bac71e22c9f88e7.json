{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\nclass Infecter {\n  constructor(container) {\n    this.container = container;\n  }\n  isEnabled() {\n    return this.container.actualOptions.infection.enable;\n  }\n  reset() {}\n  interact(p1, delta) {\n    var _a, _b;\n    const infecter1 = p1.infecter;\n    infecter1.updateInfection(delta.value);\n    if (infecter1.infectionStage === undefined) {\n      return;\n    }\n    const container = this.container;\n    const options = container.actualOptions;\n    const infectionOptions = options.infection;\n    if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n      return;\n    }\n    const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n    const pxRatio = container.retina.pixelRatio;\n    const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n    const pos = p1.getPosition();\n    const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n    const query = container.particles.quadTree.queryCircle(pos, radius);\n    const infections = infectionStage1.rate;\n    const neighbors = query.length;\n    for (const p2 of query) {\n      if (p2 === p1 || p2.destroyed || p2.spawning || !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n        continue;\n      }\n      const infecter2 = p2.infecter;\n      if (Math.random() < infections / neighbors) {\n        if (infecter2.infectionStage === undefined) {\n          infecter2.startInfection(infectedStage1);\n        } else if (infecter2.infectionStage < infecter1.infectionStage) {\n          infecter2.updateInfectionStage(infectedStage1);\n        } else if (infecter2.infectionStage > infecter1.infectionStage) {\n          const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n          const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n          infecter1.updateInfectionStage(infectedStage2);\n        }\n      }\n    }\n  }\n}\nexports.Infecter = Infecter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Infecter","constructor","container","isEnabled","actualOptions","infection","enable","reset","interact","p1","delta","_a","_b","infecter1","infecter","updateInfection","infectionStage","undefined","options","infectionOptions","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","getRadius","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","queryCircle","infections","rate","neighbors","p2","destroyed","spawning","infecter2","Math","random","startInfection","updateInfectionStage","infectionStage2","infectedStage2"],"sources":["H:/React Website/node_modules/tsparticles/Interactions/Particles/Infecter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        return this.container.actualOptions.infection.enable;\n    }\n    reset() {\n    }\n    interact(p1, delta) {\n        var _a, _b;\n        const infecter1 = p1.infecter;\n        infecter1.updateInfection(delta.value);\n        if (infecter1.infectionStage === undefined) {\n            return;\n        }\n        const container = this.container;\n        const options = container.actualOptions;\n        const infectionOptions = options.infection;\n        if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n            return;\n        }\n        const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n        const pxRatio = container.retina.pixelRatio;\n        const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n        const pos = p1.getPosition();\n        const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n        const query = container.particles.quadTree.queryCircle(pos, radius);\n        const infections = infectionStage1.rate;\n        const neighbors = query.length;\n        for (const p2 of query) {\n            if (p2 === p1 ||\n                p2.destroyed ||\n                p2.spawning ||\n                !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n                continue;\n            }\n            const infecter2 = p2.infecter;\n            if (Math.random() < infections / neighbors) {\n                if (infecter2.infectionStage === undefined) {\n                    infecter2.startInfection(infectedStage1);\n                }\n                else if (infecter2.infectionStage < infecter1.infectionStage) {\n                    infecter2.updateInfectionStage(infectedStage1);\n                }\n                else if (infecter2.infectionStage > infecter1.infectionStage) {\n                    const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n                    const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n                    infecter1.updateInfectionStage(infectedStage2);\n                }\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMA,QAAQ,CAAC;EACXC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACAC,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACD,SAAS,CAACE,aAAa,CAACC,SAAS,CAACC,MAAM;EACxD;EACAC,KAAKA,CAAA,EAAG,CACR;EACAC,QAAQA,CAACC,EAAE,EAAEC,KAAK,EAAE;IAChB,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMC,SAAS,GAAGJ,EAAE,CAACK,QAAQ;IAC7BD,SAAS,CAACE,eAAe,CAACL,KAAK,CAACX,KAAK,CAAC;IACtC,IAAIc,SAAS,CAACG,cAAc,KAAKC,SAAS,EAAE;MACxC;IACJ;IACA,MAAMf,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,MAAMgB,OAAO,GAAGhB,SAAS,CAACE,aAAa;IACvC,MAAMe,gBAAgB,GAAGD,OAAO,CAACb,SAAS;IAC1C,IAAI,CAACc,gBAAgB,CAACb,MAAM,IAAIa,gBAAgB,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MAChE;IACJ;IACA,MAAMC,eAAe,GAAGH,gBAAgB,CAACC,MAAM,CAACP,SAAS,CAACG,cAAc,CAAC;IACzE,MAAMO,OAAO,GAAGrB,SAAS,CAACsB,MAAM,CAACC,UAAU;IAC3C,MAAMC,MAAM,GAAGjB,EAAE,CAACkB,SAAS,EAAE,GAAG,CAAC,GAAGL,eAAe,CAACI,MAAM,GAAGH,OAAO;IACpE,MAAMK,GAAG,GAAGnB,EAAE,CAACoB,WAAW,EAAE;IAC5B,MAAMC,cAAc,GAAG,CAACnB,EAAE,GAAGW,eAAe,CAACS,aAAa,MAAM,IAAI,IAAIpB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGE,SAAS,CAACG,cAAc;IACrH,MAAMgB,KAAK,GAAG9B,SAAS,CAAC+B,SAAS,CAACC,QAAQ,CAACC,WAAW,CAACP,GAAG,EAAEF,MAAM,CAAC;IACnE,MAAMU,UAAU,GAAGd,eAAe,CAACe,IAAI;IACvC,MAAMC,SAAS,GAAGN,KAAK,CAACX,MAAM;IAC9B,KAAK,MAAMkB,EAAE,IAAIP,KAAK,EAAE;MACpB,IAAIO,EAAE,KAAK9B,EAAE,IACT8B,EAAE,CAACC,SAAS,IACZD,EAAE,CAACE,QAAQ,IACX,EAAEF,EAAE,CAACzB,QAAQ,CAACE,cAAc,KAAKC,SAAS,IAAIsB,EAAE,CAACzB,QAAQ,CAACE,cAAc,KAAKH,SAAS,CAACG,cAAc,CAAC,EAAE;QACxG;MACJ;MACA,MAAM0B,SAAS,GAAGH,EAAE,CAACzB,QAAQ;MAC7B,IAAI6B,IAAI,CAACC,MAAM,EAAE,GAAGR,UAAU,GAAGE,SAAS,EAAE;QACxC,IAAII,SAAS,CAAC1B,cAAc,KAAKC,SAAS,EAAE;UACxCyB,SAAS,CAACG,cAAc,CAACf,cAAc,CAAC;QAC5C,CAAC,MACI,IAAIY,SAAS,CAAC1B,cAAc,GAAGH,SAAS,CAACG,cAAc,EAAE;UAC1D0B,SAAS,CAACI,oBAAoB,CAAChB,cAAc,CAAC;QAClD,CAAC,MACI,IAAIY,SAAS,CAAC1B,cAAc,GAAGH,SAAS,CAACG,cAAc,EAAE;UAC1D,MAAM+B,eAAe,GAAG5B,gBAAgB,CAACC,MAAM,CAACsB,SAAS,CAAC1B,cAAc,CAAC;UACzE,MAAMgC,cAAc,GAAG,CAACpC,EAAE,GAAGmC,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAAChB,aAAa,MAAM,IAAI,IAAInB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG8B,SAAS,CAAC1B,cAAc;UACvLH,SAAS,CAACiC,oBAAoB,CAACE,cAAc,CAAC;QAClD;MACJ;IACJ;EACJ;AACJ;AACAlD,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}