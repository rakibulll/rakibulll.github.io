{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction drawPolygonMask(context, rawData, stroke) {\n  const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n  for (const item of rawData) {\n    context.lineTo(item.x, item.y);\n  }\n  context.closePath();\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n  const res = [];\n  for (const path of paths) {\n    const segments = path.element.pathSegList;\n    const len = segments.numberOfItems;\n    const p = {\n      x: 0,\n      y: 0\n    };\n    for (let i = 0; i < len; i++) {\n      const segment = segments.getItem(i);\n      const svgPathSeg = window.SVGPathSeg;\n      switch (segment.pathSegType) {\n        case svgPathSeg.PATHSEG_MOVETO_ABS:\n        case svgPathSeg.PATHSEG_LINETO_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n        case svgPathSeg.PATHSEG_ARC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n          {\n            const absSeg = segment;\n            p.x = absSeg.x;\n            p.y = absSeg.y;\n            break;\n          }\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n          p.x = segment.x;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n          p.y = segment.y;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_REL:\n        case svgPathSeg.PATHSEG_MOVETO_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n        case svgPathSeg.PATHSEG_ARC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n          {\n            const relSeg = segment;\n            p.x += relSeg.x;\n            p.y += relSeg.y;\n            break;\n          }\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n          p.x += segment.x;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n          p.y += segment.y;\n          break;\n        case svgPathSeg.PATHSEG_UNKNOWN:\n        case svgPathSeg.PATHSEG_CLOSEPATH:\n          continue;\n      }\n      res.push({\n        x: p.x * scale + offset.x,\n        y: p.y * scale + offset.y\n      });\n    }\n  }\n  return res;\n}\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n  const {\n    dx,\n    dy\n  } = Utils_1.NumberUtils.getDistances(pos, s1);\n  const {\n    dx: dxx,\n    dy: dyy\n  } = Utils_1.NumberUtils.getDistances(s2, s1);\n  const t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n  let x = s1.x + dxx * t;\n  let y = s1.y + dyy * t;\n  if (t < 0) {\n    x = s1.x;\n    y = s1.y;\n  } else if (t > 1) {\n    x = s2.x;\n    y = s2.y;\n  }\n  return {\n    x: x,\n    y: y,\n    isOnSegment: t >= 0 && t <= 1\n  };\n}\nfunction segmentBounce(start, stop, velocity) {\n  const {\n    dx,\n    dy\n  } = Utils_1.NumberUtils.getDistances(start, stop);\n  const wallAngle = Math.atan2(dy, dx);\n  const wallNormalX = Math.sin(wallAngle);\n  const wallNormalY = -Math.cos(wallAngle);\n  const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n  velocity.x -= d * wallNormalX;\n  velocity.y -= d * wallNormalY;\n}\nclass PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  initAsync(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n      const polygonMaskOptions = this.options;\n      this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n      if (polygonMaskOptions.enable) {\n        yield this.initRawData();\n      }\n    });\n  }\n  resize() {\n    const container = this.container;\n    const options = this.options;\n    if (!(options.enable && options.type !== Enums_1.Type.none)) {\n      return;\n    }\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n    this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n      yield this.initRawData(true);\n      container.particles.redraw();\n    }), 250);\n  }\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n  particlesInitialization() {\n    const options = this.options;\n    if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n      this.drawPoints();\n      return true;\n    }\n    return false;\n  }\n  particlePosition(position) {\n    var _a, _b;\n    const options = this.options;\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n    return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n  }\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n  }\n  draw(context) {\n    var _a;\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    const options = this.options;\n    const polygonDraw = options.draw;\n    if (!(options.enable && polygonDraw.enable)) {\n      return;\n    }\n    const rawData = this.raw;\n    for (const path of this.paths) {\n      const path2d = path.path2d;\n      const path2dSupported = this.path2DSupported;\n      if (!context) {\n        continue;\n      }\n      if (path2dSupported && path2d && this.offset) {\n        drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n  polygonBounce(particle, delta, direction) {\n    const options = this.options;\n    if (!this.raw || !options.enable || direction !== OutModeDirection_1.OutModeDirection.top) {\n      return false;\n    }\n    if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n        radius = particle.getRadius();\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n          pj = this.raw[j];\n        closest = calcClosestPtOnSegment(pi, pj, pos);\n        const dist = Utils_1.NumberUtils.getDistances(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n        if (dist.distance < radius) {\n          segmentBounce(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n      const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n    return false;\n  }\n  checkInsidePolygon(position) {\n    var _a, _b;\n    const container = this.container;\n    const options = this.options;\n    if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n      return true;\n    }\n    if (!this.raw) {\n      throw new Error(Utils_1.Constants.noPolygonFound);\n    }\n    const canvasSize = container.canvas.size;\n    const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n    const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i];\n      const pj = this.raw[j];\n      const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n  }\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const container = this.container;\n    const options = this.options;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, \"image/svg+xml\");\n    const svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n    this.paths = [];\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n    const pxRatio = container.retina.pixelRatio;\n    const scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return parsePaths(this.paths, scale, this.offset);\n  }\n  downloadSvgPath(svgUrl, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = this.options;\n      const url = svgUrl || options.url;\n      const forceDownload = force !== null && force !== void 0 ? force : false;\n      if (!url || this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      const req = yield fetch(url);\n      if (!req.ok) {\n        throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n      }\n      return this.parseSvgPath(yield req.text(), force);\n    });\n  }\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n  randomPoint() {\n    const container = this.container;\n    const options = this.options;\n    let position;\n    if (options.type === Enums_1.Type.inline) {\n      switch (options.inline.arrangement) {\n        case Enums_1.InlineArrangement.randomPoint:\n          position = this.getRandomPoint();\n          break;\n        case Enums_1.InlineArrangement.randomLength:\n          position = this.getRandomPointByLength();\n          break;\n        case Enums_1.InlineArrangement.equidistant:\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n        case Enums_1.InlineArrangement.onePerPoint:\n        case Enums_1.InlineArrangement.perPoint:\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n    const coords = Utils_1.Utils.itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  getRandomPointByLength() {\n    var _a, _b, _c;\n    const options = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n    const path = Utils_1.Utils.itemFromArray(this.paths);\n    const distance = Math.floor(Math.random() * path.length) + 1;\n    const point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const options = this.container.actualOptions;\n    const polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    let offset = 0;\n    let point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n    const distance = totalLength / options.particles.number.value;\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  createPath2D() {\n    var _a, _b;\n    const options = this.options;\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n      if (pathData) {\n        const path2d = new Path2D(pathData);\n        const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        const finalPath = new Path2D();\n        const transform = matrix.scale(options.scale);\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n  initRawData(force) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = this.options;\n      if (options.url) {\n        this.raw = yield this.downloadSvgPath(options.url, force);\n      } else if (options.data) {\n        const data = options.data;\n        let svg;\n        if (typeof data !== \"string\") {\n          const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n          const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n          svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n        } else {\n          svg = data;\n        }\n        this.raw = this.parseSvgPath(svg, force);\n      }\n      this.createPath2D();\n    });\n  }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","PolygonMaskInstance","Enums_1","require","Utils_1","PolygonMask_1","OutModeDirection_1","drawPolygonMask","context","rawData","stroke","color","ColorUtils","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","calcClosestPtOnSegment","s1","s2","pos","dx","dy","NumberUtils","getDistances","dxx","dyy","t","Math","pow","isOnSegment","segmentBounce","start","stop","velocity","wallAngle","atan2","wallNormalX","sin","wallNormalY","cos","d","constructor","container","dimension","height","path2DSupported","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","particlesInitialization","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","particlePosition","_a","_b","length","Utils","deepExtend","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","polygonDraw","path2d","path2dSupported","OutModeDirection","top","inside","outside","closest","getPosition","getRadius","j","pi","pj","dist","distance","undefined","factor","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","random","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","data","Array","map","join","namespaces"],"sources":["C:/Users/rakib/Capstone2/rakibulll.github.io/node_modules/tsparticles/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction drawPolygonMask(context, rawData, stroke) {\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList;\n        const len = segments.numberOfItems;\n        const p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n    const { dx, dy } = Utils_1.NumberUtils.getDistances(pos, s1);\n    const { dx: dxx, dy: dyy } = Utils_1.NumberUtils.getDistances(s2, s1);\n    const t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n    let x = s1.x + dxx * t;\n    let y = s1.y + dyy * t;\n    if (t < 0) {\n        x = s1.x;\n        y = s1.y;\n    }\n    else if (t > 1) {\n        x = s2.x;\n        y = s2.y;\n    }\n    return { x: x, y: y, isOnSegment: t >= 0 && t <= 1 };\n}\nfunction segmentBounce(start, stop, velocity) {\n    const { dx, dy } = Utils_1.NumberUtils.getDistances(start, stop);\n    const wallAngle = Math.atan2(dy, dx);\n    const wallNormalX = Math.sin(wallAngle);\n    const wallNormalY = -Math.cos(wallAngle);\n    const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n    velocity.x -= d * wallNormalX;\n    velocity.y -= d * wallNormalY;\n}\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    initAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            const polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (polygonMaskOptions.enable) {\n                yield this.initRawData();\n            }\n        });\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.initRawData(true);\n            container.particles.redraw();\n        }), 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== OutModeDirection_1.OutModeDirection.top) {\n            return false;\n        }\n        if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = Utils_1.NumberUtils.getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    downloadSvgPath(svgUrl, force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            const url = svgUrl || options.url;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (!url || (this.paths !== undefined && !forceDownload)) {\n                return this.raw;\n            }\n            const req = yield fetch(url);\n            if (!req.ok) {\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            }\n            return this.parseSvgPath(yield req.text(), force);\n        });\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = Utils_1.Utils.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = Utils_1.Utils.itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    initRawData(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            if (options.url) {\n                this.raw = yield this.downloadSvgPath(options.url, force);\n            }\n            else if (options.data) {\n                const data = options.data;\n                let svg;\n                if (typeof data !== \"string\") {\n                    const path = data.path instanceof Array\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                        : `<path d=\"${data.path}\" />`;\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                }\n                else {\n                    svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n            }\n            this.createPath2D();\n        });\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}