{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n  const velocity = data.particle.velocity.x;\n  if (!(data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n    return;\n  }\n  const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n  data.particle.velocity.x *= -newVelocity;\n  const minPos = data.offset.x + data.size;\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\nfunction bounceVertical(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n  const velocity = data.particle.velocity.y;\n  if (!(data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n    return;\n  }\n  const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n  data.particle.velocity.y *= -newVelocity;\n  const minPos = data.offset.y + data.size;\n  if (data.bounds.bottom >= data.canvasSize.height) {\n    data.particle.position.y = data.canvasSize.height - minPos;\n  } else if (data.bounds.top <= 0) {\n    data.particle.position.y = minPos;\n  }\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n      break;\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n      break;\n  }\n}\nclass Updater {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n  update(delta) {\n    if (this.particle.destroyed) {\n      return;\n    }\n    this.updateLife(delta);\n    if (this.particle.destroyed || this.particle.spawning) {\n      return;\n    }\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateTilt(delta);\n    this.updateRoll(delta);\n    this.updateWobble(delta);\n    this.updateColor(delta);\n    this.updateStrokeColor(delta);\n    this.updateOutModes(delta);\n  }\n  updateLife(delta) {\n    const particle = this.particle;\n    let justSpawned = false;\n    if (particle.spawning) {\n      particle.lifeDelayTime += delta.value;\n      if (particle.lifeDelayTime >= particle.lifeDelay) {\n        justSpawned = true;\n        particle.spawning = false;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n      }\n    }\n    if (particle.lifeDuration === -1) {\n      return;\n    }\n    if (particle.spawning) {\n      return;\n    }\n    if (justSpawned) {\n      particle.lifeTime = 0;\n    } else {\n      particle.lifeTime += delta.value;\n    }\n    if (particle.lifeTime < particle.lifeDuration) {\n      return;\n    }\n    particle.lifeTime = 0;\n    if (particle.livesRemaining > 0) {\n      particle.livesRemaining--;\n    }\n    if (particle.livesRemaining === 0) {\n      particle.destroy();\n      return;\n    }\n    const canvasSize = this.container.canvas.size;\n    particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n    particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n    particle.spawning = true;\n    particle.lifeDelayTime = 0;\n    particle.lifeTime = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n    particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n  }\n  updateOpacity(delta) {\n    var _a, _b;\n    const particle = this.particle;\n    const opacityOpt = particle.options.opacity;\n    const opacityAnim = opacityOpt.animation;\n    const minValue = particle.opacity.min;\n    const maxValue = particle.opacity.max;\n    if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n      return;\n    }\n    switch (particle.opacity.status) {\n      case Enums_1.AnimationStatus.increasing:\n        if (particle.opacity.value >= maxValue) {\n          particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n          particle.loops.opacity++;\n        } else {\n          particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n        if (particle.opacity.value <= minValue) {\n          particle.opacity.status = Enums_1.AnimationStatus.increasing;\n          particle.loops.opacity++;\n        } else {\n          particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n        }\n        break;\n    }\n    checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n    if (!particle.destroyed) {\n      particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n    }\n  }\n  updateSize(delta) {\n    var _a;\n    const particle = this.particle;\n    const sizeOpt = particle.options.size;\n    const sizeAnim = sizeOpt.animation;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const minValue = particle.size.min;\n    const maxValue = particle.size.max;\n    if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n      return;\n    }\n    switch (particle.size.status) {\n      case Enums_1.AnimationStatus.increasing:\n        if (particle.size.value >= maxValue) {\n          particle.size.status = Enums_1.AnimationStatus.decreasing;\n          particle.loops.size++;\n        } else {\n          particle.size.value += sizeVelocity;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n        if (particle.size.value <= minValue) {\n          particle.size.status = Enums_1.AnimationStatus.increasing;\n          particle.loops.size++;\n        } else {\n          particle.size.value -= sizeVelocity;\n        }\n    }\n    checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n    if (!particle.destroyed) {\n      particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n    }\n  }\n  updateAngle(delta) {\n    var _a;\n    const particle = this.particle;\n    const rotate = particle.options.rotate;\n    const rotateAnimation = rotate.animation;\n    const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n    if (!rotateAnimation.enable) {\n      return;\n    }\n    switch (particle.rotate.status) {\n      case Enums_1.AnimationStatus.increasing:\n        particle.rotate.value += speed;\n        if (particle.rotate.value > max) {\n          particle.rotate.value -= max;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n      default:\n        particle.rotate.value -= speed;\n        if (particle.rotate.value < 0) {\n          particle.rotate.value += max;\n        }\n        break;\n    }\n  }\n  updateTilt(delta) {\n    var _a;\n    const particle = this.particle;\n    const tilt = particle.options.tilt;\n    const tiltAnimation = tilt.animation;\n    const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n    if (!tiltAnimation.enable) {\n      return;\n    }\n    switch (particle.tilt.status) {\n      case Enums_1.AnimationStatus.increasing:\n        particle.tilt.value += speed;\n        if (particle.tilt.value > max) {\n          particle.tilt.value -= max;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n      default:\n        particle.tilt.value -= speed;\n        if (particle.tilt.value < 0) {\n          particle.tilt.value += max;\n        }\n        break;\n    }\n  }\n  updateRoll(delta) {\n    const particle = this.particle;\n    const roll = particle.options.roll;\n    const speed = particle.rollSpeed * delta.factor;\n    const max = 2 * Math.PI;\n    if (!roll.enable) {\n      return;\n    }\n    particle.rollAngle += speed;\n    if (particle.rollAngle > max) {\n      particle.rollAngle -= max;\n    }\n  }\n  updateWobble(delta) {\n    const particle = this.particle;\n    const wobble = particle.options.wobble;\n    const speed = particle.wobbleSpeed * delta.factor;\n    const distance = particle.wobbleDistance * delta.factor / (1000 / 60);\n    const max = 2 * Math.PI;\n    if (!wobble.enable) {\n      return;\n    }\n    particle.wobbleAngle += speed;\n    if (particle.wobbleAngle > max) {\n      particle.wobbleAngle -= max;\n    }\n    particle.position.x += distance * Math.cos(particle.wobbleAngle);\n    particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n  }\n  updateColor(delta) {\n    var _a, _b, _c;\n    const particle = this.particle;\n    const animationOptions = particle.options.color.animation;\n    if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n    }\n    if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n    }\n    if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n    }\n  }\n  updateStrokeColor(delta) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const particle = this.particle;\n    if (!particle.stroke.color) {\n      return;\n    }\n    const animationOptions = particle.stroke.color.animation;\n    const valueAnimations = animationOptions;\n    if (valueAnimations.enable !== undefined) {\n      const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n      if (hue) {\n        this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n      }\n    } else {\n      const hslAnimations = animationOptions;\n      const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n      if (h) {\n        this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n      }\n      const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n      if (s) {\n        this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n      }\n      const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n      if (l) {\n        this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n      }\n    }\n  }\n  updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n    var _a;\n    const colorValue = value;\n    if (!colorValue || !valueAnimation.enable) {\n      return;\n    }\n    const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n    const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n    if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n      colorValue.value += velocity;\n      if (decrease && colorValue.value > max) {\n        colorValue.status = Enums_1.AnimationStatus.decreasing;\n        colorValue.value -= colorValue.value % max;\n      }\n    } else {\n      colorValue.value -= velocity;\n      if (colorValue.value < 0) {\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.value += colorValue.value;\n      }\n    }\n    if (colorValue.value > max) {\n      colorValue.value %= max;\n    }\n  }\n  updateOutModes(delta) {\n    var _a, _b, _c, _d;\n    const outModes = this.particle.options.move.outModes;\n    this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n  updateOutMode(delta, outMode, direction) {\n    const container = this.container;\n    const particle = this.particle;\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.updateBounce(delta, direction, outMode);\n        break;\n      case Enums_1.OutMode.destroy:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle, true);\n        }\n        break;\n      case Enums_1.OutMode.out:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          this.fixOutOfCanvasPosition(direction);\n        }\n        break;\n      case Enums_1.OutMode.none:\n        this.bounceNone(direction);\n        break;\n    }\n  }\n  fixOutOfCanvasPosition(direction) {\n    const container = this.container;\n    const particle = this.particle;\n    const wrap = particle.options.move.warp;\n    const canvasSize = container.canvas.size;\n    const newPos = {\n      bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    };\n    const sizeValue = particle.getRadius();\n    const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n      particle.position.x = newPos.left;\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    }\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n      particle.position.y = newPos.top;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n      particle.position.y = newPos.bottom;\n    }\n  }\n  updateBounce(delta, direction, outMode) {\n    const container = this.container;\n    const particle = this.particle;\n    let handled = false;\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n      if (handled) {\n        break;\n      }\n    }\n    if (handled) {\n      return;\n    }\n    const pos = particle.getPosition(),\n      offset = particle.offset,\n      size = particle.getRadius(),\n      bounds = Utils_1.Utils.calculateBounds(pos, size),\n      canvasSize = container.canvas.size;\n    bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n  bounceNone(direction) {\n    const particle = this.particle;\n    if (particle.options.move.distance) {\n      return;\n    }\n    const gravityOptions = particle.options.move.gravity;\n    const container = this.container;\n    if (!gravityOptions.enable) {\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n      if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n}\nexports.Updater = Updater;","map":{"version":3,"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","constructor","container","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateTilt","updateRoll","updateWobble","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","setRangeValue","reset","lifeOptions","life","delay","duration","_a","_b","opacityOpt","opacity","opacityAnim","animation","enable","count","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","rotate","rotateAnimation","speed","Math","PI","tilt","tiltAnimation","roll","rollSpeed","rollAngle","wobble","wobbleSpeed","distance","wobbleDistance","wobbleAngle","cos","abs","sin","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugin","plugins","particleBounce","pos","getPosition","gravityOptions","gravity","acceleration"],"sources":["C:/Users/rakib/Capstone2/rakibulll.github.io/node_modules/tsparticles/Core/Particle/Updater.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.x;\n    if (!((data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n    data.particle.velocity.x *= -newVelocity;\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction bounceVertical(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.y;\n    if (!((data.direction === Enums_1.OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n    data.particle.velocity.y *= -newVelocity;\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateTilt(delta);\n        this.updateRoll(delta);\n        this.updateWobble(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            particle.lifeTime = 0;\n        }\n        else {\n            particle.lifeTime += delta.value;\n        }\n        if (particle.lifeTime < particle.lifeDuration) {\n            return;\n        }\n        particle.lifeTime = 0;\n        if (particle.livesRemaining > 0) {\n            particle.livesRemaining--;\n        }\n        if (particle.livesRemaining === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n        particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n        particle.spawning = true;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityOpt = particle.options.opacity;\n        const opacityAnim = opacityOpt.animation;\n        const minValue = particle.opacity.min;\n        const maxValue = particle.opacity.max;\n        if (!(!particle.destroyed &&\n            opacityAnim.enable &&\n            (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n            return;\n        }\n        switch (particle.opacity.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.opacity.value >= maxValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.opacity.value <= minValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                }\n                break;\n        }\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n        }\n    }\n    updateSize(delta) {\n        var _a;\n        const particle = this.particle;\n        const sizeOpt = particle.options.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const minValue = particle.size.min;\n        const maxValue = particle.size.max;\n        if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n            return;\n        }\n        switch (particle.size.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.size.value >= maxValue) {\n                    particle.size.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value += sizeVelocity;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.size.value <= minValue) {\n                    particle.size.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value -= sizeVelocity;\n                }\n        }\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!rotateAnimation.enable) {\n            return;\n        }\n        switch (particle.rotate.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.rotate.value += speed;\n                if (particle.rotate.value > max) {\n                    particle.rotate.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.rotate.value -= speed;\n                if (particle.rotate.value < 0) {\n                    particle.rotate.value += max;\n                }\n                break;\n        }\n    }\n    updateTilt(delta) {\n        var _a;\n        const particle = this.particle;\n        const tilt = particle.options.tilt;\n        const tiltAnimation = tilt.animation;\n        const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!tiltAnimation.enable) {\n            return;\n        }\n        switch (particle.tilt.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.tilt.value += speed;\n                if (particle.tilt.value > max) {\n                    particle.tilt.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.tilt.value -= speed;\n                if (particle.tilt.value < 0) {\n                    particle.tilt.value += max;\n                }\n                break;\n        }\n    }\n    updateRoll(delta) {\n        const particle = this.particle;\n        const roll = particle.options.roll;\n        const speed = particle.rollSpeed * delta.factor;\n        const max = 2 * Math.PI;\n        if (!roll.enable) {\n            return;\n        }\n        particle.rollAngle += speed;\n        if (particle.rollAngle > max) {\n            particle.rollAngle -= max;\n        }\n    }\n    updateWobble(delta) {\n        const particle = this.particle;\n        const wobble = particle.options.wobble;\n        const speed = particle.wobbleSpeed * delta.factor;\n        const distance = (particle.wobbleDistance * delta.factor) / (1000 / 60);\n        const max = 2 * Math.PI;\n        if (!wobble.enable) {\n            return;\n        }\n        particle.wobbleAngle += speed;\n        if (particle.wobbleAngle > max) {\n            particle.wobbleAngle -= max;\n        }\n        particle.position.x += distance * Math.cos(particle.wobbleAngle);\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n    updateColor(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const animationOptions = particle.options.color.animation;\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n        }\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n        }\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const particle = this.particle;\n        if (!particle.stroke.color) {\n            return;\n        }\n        const animationOptions = particle.stroke.color.animation;\n        const valueAnimations = animationOptions;\n        if (valueAnimations.enable !== undefined) {\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n            if (hue) {\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n            }\n        }\n        else {\n            const hslAnimations = animationOptions;\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n            if (h) {\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n            }\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n            if (s) {\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n            }\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n            if (l) {\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n            }\n        }\n    }\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n        var _a;\n        const colorValue = value;\n        if (!colorValue || !valueAnimation.enable) {\n            return;\n        }\n        const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n            colorValue.value += velocity;\n            if (decrease && colorValue.value > max) {\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n        else {\n            colorValue.value -= velocity;\n            if (colorValue.value < 0) {\n                colorValue.status = Enums_1.AnimationStatus.increasing;\n                colorValue.value += colorValue.value;\n            }\n        }\n        if (colorValue.value > max) {\n            colorValue.value %= max;\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.options.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle, true);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.options.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.options.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}