{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\nclass Infecter {\n  constructor(container) {\n    this.container = container;\n  }\n  startInfection(stage) {\n    const options = this.container.actualOptions;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n    if (stage > stagesCount || stage < 0) {\n      return;\n    }\n    this.infectionDelay = 0;\n    this.infectionDelayStage = stage;\n  }\n  updateInfectionStage(stage) {\n    const options = this.container.actualOptions;\n    const stagesCount = options.infection.stages.length;\n    if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {\n      return;\n    }\n    this.infectionStage = stage;\n    this.infectionTime = 0;\n  }\n  updateInfection(delta) {\n    const options = this.container.actualOptions;\n    const infection = options.infection;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n    if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n      const stage = this.infectionDelayStage;\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n      if (this.infectionDelay > infection.delay * 1000) {\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n        delete this.infectionDelay;\n        delete this.infectionDelayStage;\n      } else {\n        this.infectionDelay += delta;\n      }\n    } else {\n      delete this.infectionDelay;\n      delete this.infectionDelayStage;\n    }\n    if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n      const infectionStage = stages[this.infectionStage];\n      if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n        if (this.infectionTime > infectionStage.duration * 1000) {\n          this.nextInfectionStage();\n        } else {\n          this.infectionTime += delta;\n        }\n      } else {\n        this.infectionTime += delta;\n      }\n    } else {\n      delete this.infectionStage;\n      delete this.infectionTime;\n    }\n  }\n  nextInfectionStage() {\n    const options = this.container.actualOptions;\n    const stagesCount = options.infection.stages.length;\n    if (stagesCount <= 0 || this.infectionStage === undefined) {\n      return;\n    }\n    this.infectionTime = 0;\n    if (stagesCount <= ++this.infectionStage) {\n      if (options.infection.cure) {\n        delete this.infectionStage;\n        delete this.infectionTime;\n        return;\n      } else {\n        this.infectionStage = 0;\n        this.infectionTime = 0;\n      }\n    }\n  }\n}\nexports.Infecter = Infecter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Infecter","constructor","container","startInfection","stage","options","actualOptions","stages","infection","stagesCount","length","infectionDelay","infectionDelayStage","updateInfectionStage","infectionStage","undefined","infectionTime","updateInfection","delta","delay","duration","nextInfectionStage","cure"],"sources":["H:/React Website/node_modules/tsparticles/Core/Particle/Infecter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    startInfection(stage) {\n        const options = this.container.actualOptions;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (stage > stagesCount || stage < 0) {\n            return;\n        }\n        this.infectionDelay = 0;\n        this.infectionDelayStage = stage;\n    }\n    updateInfectionStage(stage) {\n        const options = this.container.actualOptions;\n        const stagesCount = options.infection.stages.length;\n        if (stage > stagesCount || stage < 0 || (this.infectionStage !== undefined && this.infectionStage > stage)) {\n            return;\n        }\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n    }\n    updateInfection(delta) {\n        const options = this.container.actualOptions;\n        const infection = options.infection;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n            const stage = this.infectionDelayStage;\n            if (stage > stagesCount || stage < 0) {\n                return;\n            }\n            if (this.infectionDelay > infection.delay * 1000) {\n                this.infectionStage = stage;\n                this.infectionTime = 0;\n                delete this.infectionDelay;\n                delete this.infectionDelayStage;\n            }\n            else {\n                this.infectionDelay += delta;\n            }\n        }\n        else {\n            delete this.infectionDelay;\n            delete this.infectionDelayStage;\n        }\n        if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n            const infectionStage = stages[this.infectionStage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n                if (this.infectionTime > infectionStage.duration * 1000) {\n                    this.nextInfectionStage();\n                }\n                else {\n                    this.infectionTime += delta;\n                }\n            }\n            else {\n                this.infectionTime += delta;\n            }\n        }\n        else {\n            delete this.infectionStage;\n            delete this.infectionTime;\n        }\n    }\n    nextInfectionStage() {\n        const options = this.container.actualOptions;\n        const stagesCount = options.infection.stages.length;\n        if (stagesCount <= 0 || this.infectionStage === undefined) {\n            return;\n        }\n        this.infectionTime = 0;\n        if (stagesCount <= ++this.infectionStage) {\n            if (options.infection.cure) {\n                delete this.infectionStage;\n                delete this.infectionTime;\n                return;\n            }\n            else {\n                this.infectionStage = 0;\n                this.infectionTime = 0;\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}