{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Infecter_1 = require(\"./Particle/Infecter\");\nconst Mover_1 = require(\"./Particle/Mover\");\nconst Vector_1 = require(\"./Particle/Vector\");\nclass Particle {\n  constructor(id, container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.NumberUtils.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.NumberUtils.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    const sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      const sizeRange = Utils_1.NumberUtils.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.NumberUtils.getRangeMin(sizeRange);\n      this.size.max = Utils_1.NumberUtils.getRangeMax(sizeRange);\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.NumberUtils.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    const rotateAnimation = this.options.rotate.animation;\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    const tiltAnimation = this.options.tilt.animation;\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n    const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n    const rollOpt = this.options.roll;\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value - rollOpt.darken.value\n          };\n        } else if (rollOpt.enlighten.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value + rollOpt.darken.value\n          };\n        }\n      }\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n    const wobbleOpt = this.options.wobble;\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.create(0, 0);\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.NumberUtils.getRangeMax(opacityOptions.value),\n      min: Utils_1.NumberUtils.getRangeMin(opacityOptions.value),\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = Utils_1.NumberUtils.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.NumberUtils.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.NumberUtils.getRangeMax(opacityRange);\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.NumberUtils.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    const imageShape = this.loadImageShape(container, drawer);\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n    const lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n  }\n  move(delta) {\n    this.mover.move(delta);\n  }\n  update(delta) {\n    this.updater.update(delta);\n  }\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n  getPosition() {\n    return this.position.add(this.offset);\n  }\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n    if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n      return this.backColor;\n    }\n    return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.links = [];\n    if (this.unbreakable) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    if (override) {\n      return;\n    }\n    const destroyOptions = this.options.destroy;\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n  split() {\n    const splitOptions = this.options.destroy.split;\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n    const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n      if (colorAnimation.sync) {\n        return;\n      }\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n  calcPosition(container, position) {\n    let tryCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var _a, _b;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n      }\n    }\n    const canvasSize = container.canvas.size;\n    const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n    const outMode = this.options.move.outMode;\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, tryCount + 1);\n    }\n    return pos;\n  }\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const overlapOptions = this.options.collisions.overlap;\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n      let overlaps = false;\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n      return overlaps;\n    }\n    return false;\n  }\n  calculateVelocity() {\n    const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n    return res;\n  }\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n    if (!image) {\n      return;\n    }\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: Object.assign(Object.assign({}, image), {\n          svgData: svgColoredData\n        }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n          if (this.image && img2) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n}\nexports.Particle = Particle;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","ParticlesOptions_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","Vector_1","constructor","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","pathDelay","NumberUtils","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","getRangeValue","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","hslColor","ColorUtils","colorToHsl","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","initialPosition","offset","Vector","create","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","particleInit","delta","update","draw","canvas","drawParticle","getPosition","add","getRadius","radius","getMass","pow","getHslFromAnimation","getStrokeColor","destroy","override","plugin","plugins","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","rate","i","addSplitParticle","colorValue","tryCount","arguments","length","pluginPos","particlePosition","x","y","canvasSize","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","angle","radOffset","range","left","right","straight","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","assign","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"sources":["C:/Users/rakib/Capstone2/rakibulll.github.io/node_modules/tsparticles/Core/Particle.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Infecter_1 = require(\"./Particle/Infecter\");\nconst Mover_1 = require(\"./Particle/Mover\");\nconst Vector_1 = require(\"./Particle/Vector\");\nclass Particle {\n    constructor(id, container, position, overrideOptions) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.links = [];\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\n                        : shapeData);\n                }\n            }\n        }\n        else {\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.NumberUtils.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.NumberUtils.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.NumberUtils.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.NumberUtils.getRangeMin(sizeRange);\n            this.size.max = Utils_1.NumberUtils.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.NumberUtils.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value - rollOpt.darken.value,\n                    };\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value + rollOpt.darken.value,\n                    };\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(this.container, position);\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.create(0, 0);\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.NumberUtils.getRangeMax(opacityOptions.value),\n            min: Utils_1.NumberUtils.getRangeMin(opacityOptions.value),\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.NumberUtils.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.NumberUtils.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.NumberUtils.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.NumberUtils.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        const imageShape = this.loadImageShape(container, drawer);\n        if (imageShape) {\n            this.image = imageShape.image;\n            this.fill = imageShape.fill;\n            this.close = imageShape.close;\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        const lifeOptions = particlesOptions.life;\n        this.lifeDelay = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeDelayTime = 0;\n        this.lifeDuration = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeTime = 0;\n        this.livesRemaining = particlesOptions.life.count;\n        this.spawning = this.lifeDelay > 0;\n        if (this.lifeDuration <= 0) {\n            this.lifeDuration = -1;\n        }\n        if (this.livesRemaining <= 0) {\n            this.livesRemaining = -1;\n        }\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n        this.updater = new Updater_1.Updater(container, this);\n        this.infecter = new Infecter_1.Infecter(container);\n        this.mover = new Mover_1.Mover(container, this);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n    }\n    move(delta) {\n        this.mover.move(delta);\n    }\n    update(delta) {\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return this.position.add(this.offset);\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n            return this.backColor;\n        }\n        return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.links = [];\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadImageShape(container, drawer) {\n        var _a, _b, _c, _d, _e;\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n            return;\n        }\n        const imageDrawer = drawer;\n        const images = imageDrawer.getImages(container).images;\n        const imageData = this.shapeData;\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n        const color = this.getFillColor();\n        let imageRes;\n        if (!image) {\n            return;\n        }\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n            const domUrl = URL || window.URL || window.webkitURL || window;\n            const url = domUrl.createObjectURL(svg);\n            const img = new Image();\n            imageRes = {\n                data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n                loaded: false,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                source: imageData.src,\n            };\n            img.addEventListener(\"load\", () => {\n                if (this.image) {\n                    this.image.loaded = true;\n                    image.element = img;\n                }\n                domUrl.revokeObjectURL(url);\n            });\n            img.addEventListener(\"error\", () => {\n                domUrl.revokeObjectURL(url);\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\n                    if (this.image && img2) {\n                        image.element = img2.element;\n                        this.image.loaded = true;\n                    }\n                });\n            });\n            img.src = url;\n        }\n        else {\n            imageRes = {\n                data: image,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n        return {\n            image: imageRes,\n            fill,\n            close,\n        };\n    }\n}\nexports.Particle = Particle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}